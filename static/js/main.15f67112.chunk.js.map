{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","allWaves","setAllWaves","contractABI","abi","getAllWaves","a","window","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","waves","wavesCleaned","forEach","wave","push","address","waver","timestamp","Date","message","on","from","console","log","prevState","checkIfWalletIsConnected","request","method","accounts","length","account","connectWallet","alert","getTotalWaves","count","toNumber","gasLimit","waveTxn","hash","wait","useEffect","className","type","id","placeholder","onClick","map","index","toDateString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.15f67112.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport { ethers } from \"ethers\";\nimport abi from './utils/WavePortal.json'\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [allWaves, setAllWaves] = useState([]);\n\n  const contractAddress = \" 0x0f7BEc5776B31fED1619E1fb2C31D41bD1f3e541\";\n\n  const contractABI = abi.abi;\n\n  const getAllWaves = async () => {\n    try {\n      const { ethereum } = window\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        const waves = await wavePortalContract.getAllWaves();\n\n        const wavesCleaned = [];\n        waves.forEach(wave => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message,\n          })\n        })\n\n        setAllWaves(wavesCleaned)\n\n        wavePortalContract.on(\"NewWave\", (from, timestamp, message) => {\n          console.log(\"NewWave\", from, timestamp, message);\n\n          setAllWaves(prevState => [...prevState, {\n            address: from,\n            timestamp: new Date(timestamp * 1000),\n            message: message\n          }]);\n        });\n      } else {\n        console.log(\"Ethereum object doesn't exist!\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n        getAllWaves();\n      } else {\n        console.log(\"No authorized account found\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n\n        const waveTxn = await wavePortalContract.wave(\"\", { gasLimit: 300000 });\n\n        console.log(\"Mining...\", waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n          Hi Peeps!\n        </div>\n\n        <div className=\"bio\">\n          I am Moldyr and I am super excited to get onboard the Blockchain spaceshipðŸš€ <br /> Connect your Ethereum wallet and wave at me!\n        </div>\n        <input\n          type=\"text\"\n          id=\"waveText\"\n          className=\"waveText\"\n          placeholder=\"Send me a link to something interesting about Solidity:)\"\n        />\n\n        <button className=\"waveButton\" onClick={wave}>\n          wave at me ðŸ‘‹\n        </button>\n\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n\n        {allWaves.length > 0 && (\n          <div className=\"wavers\">\n            <h1>Look who else waved ðŸ™Œ</h1>\n            {allWaves.map((wave, index) => (\n              <div className=\"waversList\">\n                <em>{wave.address}</em><br />\n                <p>{wave.message}</p> waved on{\" \"}\n                <em>{wave.timestamp.toDateString()}</em>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}