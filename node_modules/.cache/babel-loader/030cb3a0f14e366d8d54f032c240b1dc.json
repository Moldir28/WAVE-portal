{"ast":null,"code":"var _jsxFileName = \"/Users/moldyr/Desktop/My projects/GIT Projects/waveportal/src/App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport { ethers } from \"ethers\";\nimport abi from './utils/WavePortal.json';\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [allWaves, setAllWaves] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const contractAddress = \" 0x0f7BEc5776B31fED1619E1fb2C31D41bD1f3e541\";\n  const contractABI = abi.abi;\n\n  const getAllWaves = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        const waves = await wavePortalContract.getAllWaves();\n        const wavesCleaned = [];\n        waves.forEach(wave => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message\n          });\n        });\n        setAllWaves(wavesCleaned);\n        wavePortalContract.on(\"NewWave\", (from, timestamp, message) => {\n          console.log(\"NewWave\", from, timestamp, message);\n          setAllWaves(prevState => [...prevState, {\n            address: from,\n            timestamp: new Date(timestamp * 1000),\n            message: message\n          }]);\n        });\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({\n        method: 'eth_accounts'\n      });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n        getAllWaves();\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const wave = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n        const waveTxn = await wavePortalContract.wave({\n          message\n        }, {\n          gasLimit: 300000\n        });\n        console.log(\"Mining...\", waveTxn.hash);\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n        setMessage();\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const onChange = e => {\n    setMessage(e.target.value);\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mainContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dataContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, \"Hi Peeps!\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, \"I am Moldyr and I am super excited to get onboard the Blockchain spaceship\\uD83D\\uDE80 \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 88\n    }\n  }), \" Connect your Ethereum wallet and wave at me!\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"waveText\",\n    className: \"waveText\",\n    placeholder: \"Send me a link to something interesting about Solidity:)\",\n    value: message,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"waveButton\",\n    onClick: wave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  }, \"wave at me \\uD83D\\uDC4B\"), !currentAccount && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"waveButton\",\n    onClick: connectWallet,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }\n  }, \"Connect Wallet\"), allWaves.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wavers\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }\n  }, \"Look who else waved \\uD83D\\uDE4C\"), allWaves.map((wave, index) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"waversList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"em\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 17\n    }\n  }, wave.address), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 40\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 17\n    }\n  }, wave.message), \" waved on\", \" \", /*#__PURE__*/React.createElement(\"em\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 17\n    }\n  }, wave.timestamp.toDateString()))))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/moldyr/Desktop/My projects/GIT Projects/waveportal/src/App.js"],"names":["React","useEffect","useState","ethers","abi","App","currentAccount","setCurrentAccount","allWaves","setAllWaves","message","setMessage","contractAddress","contractABI","getAllWaves","ethereum","window","provider","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","waves","wavesCleaned","forEach","wave","push","address","waver","timestamp","Date","on","from","console","log","prevState","error","checkIfWalletIsConnected","accounts","request","method","length","account","connectWallet","alert","count","getTotalWaves","toNumber","waveTxn","gasLimit","hash","wait","onChange","e","target","value","map","index","toDateString"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport { ethers } from \"ethers\";\nimport abi from './utils/WavePortal.json'\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [allWaves, setAllWaves] = useState([]);\n  const [message, setMessage] = useState(\"\")\n\n  const contractAddress = \" 0x0f7BEc5776B31fED1619E1fb2C31D41bD1f3e541\";\n\n  const contractABI = abi.abi;\n\n  const getAllWaves = async () => {\n    try {\n      const { ethereum } = window\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        const waves = await wavePortalContract.getAllWaves();\n\n        const wavesCleaned = [];\n        waves.forEach(wave => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message,\n          })\n        })\n\n        setAllWaves(wavesCleaned)\n\n        wavePortalContract.on(\"NewWave\", (from, timestamp, message) => {\n          console.log(\"NewWave\", from, timestamp, message);\n\n          setAllWaves(prevState => [...prevState, {\n            address: from,\n            timestamp: new Date(timestamp * 1000),\n            message: message\n          }]);\n        });\n      } else {\n        console.log(\"Ethereum object doesn't exist!\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n        getAllWaves();\n      } else {\n        console.log(\"No authorized account found\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n\n        const waveTxn = await wavePortalContract.wave({ message }, { gasLimit: 300000 });\n\n        console.log(\"Mining...\", waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n        setMessage();\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const onChange = (e) => {\n    setMessage(e.target.value);\n  };\n\n\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n          Hi Peeps!\n        </div>\n\n        <div className=\"bio\">\n          I am Moldyr and I am super excited to get onboard the Blockchain spaceship🚀 <br /> Connect your Ethereum wallet and wave at me!\n        </div>\n        <input\n          type=\"text\"\n          id=\"waveText\"\n          className=\"waveText\"\n          placeholder=\"Send me a link to something interesting about Solidity:)\"\n          value={message}\n          onChange={onChange}\n        />\n\n        <button className=\"waveButton\" onClick={wave}>\n          wave at me 👋\n        </button>\n\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n\n        {allWaves.length > 0 && (\n          <div className=\"wavers\">\n            <h1>Look who else waved 🙌</h1>\n            {allWaves.map((wave, index) => (\n              <div className=\"waversList\">\n                <em>{wave.address}</em><br />\n                <p>{wave.message}</p> waved on{\" \"}\n                <em>{wave.timestamp.toDateString()}</em>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}