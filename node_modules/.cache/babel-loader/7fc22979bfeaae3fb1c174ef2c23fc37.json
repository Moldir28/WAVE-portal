{"ast":null,"code":"var _jsxFileName = \"/Users/moldyr/Desktop/waveportal/waveportal-starter-project/src/App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport { ethers } from \"ethers\";\nimport abi from './utils/WavePortal.json';\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [allWaves, setAllWaves] = useState([]);\n  const contractAddress = \"0x80A57adCc06a85753b37889033DB4FC400B7c665\";\n  const contractABI = abi.abi;\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({\n        method: 'eth_accounts'\n      });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account); // setCurrentAccount(account);\n        // getAllWaves();\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const wave = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n        const waveTxn = await wavePortalContract.wave(\"hey there, here is the link: https://betterprogramming.pub/3-facts-about-solidity-that-all-beginners-should-know-248165adc00e\", {\n          gasLimit: 300000\n        });\n        console.log(\"Mining...\", waveTxn.hash);\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getAllWaves = async () => {\n    try {\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider();\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        const waves = await wavePortalContract.getAllWaves();\n        let wavesCleaned = [];\n        waves.forEach(wave => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message\n          });\n        });\n        setAllWaves(wavesCleaned);\n        wavePortalContract.on(\"NewWave\", (from, timestamp, message) => {\n          console.log(\"NewWave\", from, timestamp, message);\n          setAllWaves(prevState => [...prevState, {\n            address: from,\n            timestamp: new Date(timestamp * 1000),\n            message: message\n          }]);\n        });\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mainContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dataContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, \"Hi Peeps!\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, \"I am Moldyr and I am super excited to get onboard the Blockchain spaceship\\uD83D\\uDE80 \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 88\n    }\n  }), \" Connect your Ethereum wallet and wave at me!\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"waveText\",\n    className: \"waveText\",\n    placeholder: \"Send me a link to something interesting about Solidity:)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"waveButton\",\n    onClick: wave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  }, \"wave at me \\uD83D\\uDC4B\"), !currentAccount && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"waveButton\",\n    onClick: connectWallet,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  }, \"Connect Wallet\"), allWaves.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wavers\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }\n  }, \"Look who else waved \\uD83D\\uDE4C\"), allWaves.map((wave, index) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"waversList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"em\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 17\n    }\n  }, wave.address), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 40\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 17\n    }\n  }, wave.message), \" waved on\", \" \", /*#__PURE__*/React.createElement(\"em\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 17\n    }\n  }, wave.timestamp.toDateString()))))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/moldyr/Desktop/waveportal/waveportal-starter-project/src/App.js"],"names":["React","useEffect","useState","ethers","abi","App","currentAccount","setCurrentAccount","allWaves","setAllWaves","contractAddress","contractABI","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","error","connectWallet","alert","wave","provider","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","count","getTotalWaves","toNumber","waveTxn","gasLimit","hash","wait","getAllWaves","waves","wavesCleaned","forEach","push","address","waver","timestamp","Date","message","on","from","prevState","map","index","toDateString"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,GAAP,MAAgB,yBAAhB;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAChB,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCL,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAMQ,eAAe,GAAG,4CAAxB;AAEA,QAAMC,WAAW,GAAGP,GAAG,CAACA,GAAxB;;AAEA,QAAMQ,wBAAwB,GAAG,YAAY;AAC3C,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAeC,MAArB;;AAEA,UAAI,CAACD,QAAL,EAAe;AACbE,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACA;AACD,OAHD,MAGO;AACLD,QAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CH,QAA3C;AACD;;AAED,YAAMI,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,OAAT,CAAiB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAjB,CAAvB;;AAEA,UAAIF,QAAQ,CAACG,MAAT,KAAoB,CAAxB,EAA2B;AACzB,cAAMC,OAAO,GAAGJ,QAAQ,CAAC,CAAD,CAAxB;AACAF,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CK,OAA5C,EAFyB,CAGzB;AACA;AACD,OALD,MAKO;AACLN,QAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACD;AACF,KApBD,CAoBE,OAAOM,KAAP,EAAc;AACdP,MAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACD;AACF,GAxBD;;AA0BA,QAAMC,aAAa,GAAG,YAAY;AAChC,QAAI;AACF,YAAM;AAAEV,QAAAA;AAAF,UAAeC,MAArB;;AAEA,UAAI,CAACD,QAAL,EAAe;AACbW,QAAAA,KAAK,CAAC,eAAD,CAAL;AACA;AACD;;AAED,YAAMP,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,OAAT,CAAiB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAjB,CAAvB;AAEAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBC,QAAQ,CAAC,CAAD,CAAjC;AACAV,MAAAA,iBAAiB,CAACU,QAAQ,CAAC,CAAD,CAAT,CAAjB;AACD,KAZD,CAYE,OAAOK,KAAP,EAAc;AACdP,MAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACD;AACF,GAhBD;;AAkBA,QAAMG,IAAI,GAAG,YAAY;AACvB,QAAI;AACF,YAAM;AAAEZ,QAAAA;AAAF,UAAeC,MAArB;;AAEA,UAAID,QAAJ,EAAc;AACZ,cAAMa,QAAQ,GAAG,IAAIvB,MAAM,CAACwB,SAAP,CAAiBC,YAArB,CAAkCf,QAAlC,CAAjB;AACA,cAAMgB,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,cAAMC,kBAAkB,GAAG,IAAI5B,MAAM,CAAC6B,QAAX,CAAoBtB,eAApB,EAAqCC,WAArC,EAAkDkB,MAAlD,CAA3B;AAEA,YAAII,KAAK,GAAG,MAAMF,kBAAkB,CAACG,aAAnB,EAAlB;AACAnB,QAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CiB,KAAK,CAACE,QAAN,EAA7C;AAEA,cAAMC,OAAO,GAAG,MAAML,kBAAkB,CAACN,IAAnB,CAAwB,+HAAxB,EAAyJ;AAAEY,UAAAA,QAAQ,EAAE;AAAZ,SAAzJ,CAAtB;AACAtB,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBoB,OAAO,CAACE,IAAjC;AAEA,cAAMF,OAAO,CAACG,IAAR,EAAN;AACAxB,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBoB,OAAO,CAACE,IAAjC;AAEAL,QAAAA,KAAK,GAAG,MAAMF,kBAAkB,CAACG,aAAnB,EAAd;AACAnB,QAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CiB,KAAK,CAACE,QAAN,EAA7C;AACD,OAhBD,MAgBO;AACLpB,QAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACD;AACF,KAtBD,CAsBE,OAAOM,KAAP,EAAc;AACdP,MAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACD;AACF,GA1BD;;AA4BA,QAAMkB,WAAW,GAAG,YAAY;AAC9B,QAAI;AACF,UAAI1B,MAAM,CAACD,QAAX,EAAqB;AACnB,cAAMa,QAAQ,GAAG,IAAIvB,MAAM,CAACwB,SAAP,CAAiBC,YAArB,EAAjB;AACA,cAAMC,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,cAAMC,kBAAkB,GAAG,IAAI5B,MAAM,CAAC6B,QAAX,CAAoBtB,eAApB,EAAqCC,WAArC,EAAkDkB,MAAlD,CAA3B;AAEA,cAAMY,KAAK,GAAG,MAAMV,kBAAkB,CAACS,WAAnB,EAApB;AAEA,YAAIE,YAAY,GAAG,EAAnB;AACAD,QAAAA,KAAK,CAACE,OAAN,CAAclB,IAAI,IAAI;AACpBiB,UAAAA,YAAY,CAACE,IAAb,CAAkB;AAChBC,YAAAA,OAAO,EAAEpB,IAAI,CAACqB,KADE;AAEhBC,YAAAA,SAAS,EAAE,IAAIC,IAAJ,CAASvB,IAAI,CAACsB,SAAL,GAAiB,IAA1B,CAFK;AAGhBE,YAAAA,OAAO,EAAExB,IAAI,CAACwB;AAHE,WAAlB;AAKD,SAND;AAQAxC,QAAAA,WAAW,CAACiC,YAAD,CAAX;AAEAX,QAAAA,kBAAkB,CAACmB,EAAnB,CAAsB,SAAtB,EAAiC,CAACC,IAAD,EAAOJ,SAAP,EAAkBE,OAAlB,KAA8B;AAC7DlC,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBmC,IAAvB,EAA6BJ,SAA7B,EAAwCE,OAAxC;AAEAxC,UAAAA,WAAW,CAAC2C,SAAS,IAAI,CAAC,GAAGA,SAAJ,EAAe;AACtCP,YAAAA,OAAO,EAAEM,IAD6B;AAEtCJ,YAAAA,SAAS,EAAE,IAAIC,IAAJ,CAASD,SAAS,GAAG,IAArB,CAF2B;AAGtCE,YAAAA,OAAO,EAAEA;AAH6B,WAAf,CAAd,CAAX;AAKD,SARD;AASD,OA3BD,MA2BO;AACLlC,QAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACD;AACF,KA/BD,CA+BE,OAAOM,KAAP,EAAc;AACdP,MAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACD;AACF,GAnCD;;AAsCArB,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,wBAAwB;AACzB,GAFQ,EAEN,EAFM,CAAT;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,eAKE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6GAC+E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD/E,kDALF,eAQE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,EAAE,EAAC,UAFL;AAGE,IAAA,SAAS,EAAC,UAHZ;AAIE,IAAA,WAAW,EAAC,0DAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,eAeE;AAAQ,IAAA,SAAS,EAAC,YAAlB;AAA+B,IAAA,OAAO,EAAEa,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAfF,EAmBG,CAACnB,cAAD,iBACC;AAAQ,IAAA,SAAS,EAAC,YAAlB;AAA+B,IAAA,OAAO,EAAEiB,aAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBApBJ,EAyBGf,QAAQ,CAACY,MAAT,GAAkB,CAAlB,iBACC;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCADF,EAEGZ,QAAQ,CAAC6C,GAAT,CAAa,CAAC5B,IAAD,EAAO6B,KAAP,kBACZ;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK7B,IAAI,CAACoB,OAAV,CADF,eACyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADzB,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIpB,IAAI,CAACwB,OAAT,CAFF,eAEiC,GAFjC,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKxB,IAAI,CAACsB,SAAL,CAAeQ,YAAf,EAAL,CAHF,CADD,CAFH,CA1BJ,CADF,CADF;AA0CD,CApKD;;AAsKA,eAAelD,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport { ethers } from \"ethers\";\nimport abi from './utils/WavePortal.json'\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [allWaves, setAllWaves] = useState([]);\n  const contractAddress = \"0x80A57adCc06a85753b37889033DB4FC400B7c665\";\n\n  const contractABI = abi.abi;\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        // setCurrentAccount(account);\n        // getAllWaves();\n      } else {\n        console.log(\"No authorized account found\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n\n        const waveTxn = await wavePortalContract.wave(\"hey there, here is the link: https://betterprogramming.pub/3-facts-about-solidity-that-all-beginners-should-know-248165adc00e\", { gasLimit: 300000 });\n        console.log(\"Mining...\", waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const getAllWaves = async () => {\n    try {\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider();\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        const waves = await wavePortalContract.getAllWaves();\n\n        let wavesCleaned = [];\n        waves.forEach(wave => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message\n          });\n        });\n\n        setAllWaves(wavesCleaned);\n\n        wavePortalContract.on(\"NewWave\", (from, timestamp, message) => {\n          console.log(\"NewWave\", from, timestamp, message);\n\n          setAllWaves(prevState => [...prevState, {\n            address: from,\n            timestamp: new Date(timestamp * 1000),\n            message: message\n          }]);\n        });\n      } else {\n        console.log(\"Ethereum object doesn't exist!\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n          Hi Peeps!\n        </div>\n\n        <div className=\"bio\">\n          I am Moldyr and I am super excited to get onboard the Blockchain spaceship🚀 <br /> Connect your Ethereum wallet and wave at me!\n        </div>\n        <input\n          type=\"text\"\n          id=\"waveText\"\n          className=\"waveText\"\n          placeholder=\"Send me a link to something interesting about Solidity:)\"\n        />\n\n        <button className=\"waveButton\" onClick={wave}>\n          wave at me 👋\n        </button>\n\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n\n        {allWaves.length > 0 && (\n          <div className=\"wavers\">\n            <h1>Look who else waved 🙌</h1>\n            {allWaves.map((wave, index) => (\n              <div className=\"waversList\">\n                <em>{wave.address}</em><br />\n                <p>{wave.message}</p> waved on{\" \"}\n                <em>{wave.timestamp.toDateString()}</em>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  )\n};\n\nexport default App"]},"metadata":{},"sourceType":"module"}