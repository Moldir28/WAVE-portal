{"ast":null,"code":"import _regeneratorRuntime from\"/Users/moldyr/Desktop/My projects/GIT Projects/waveportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _toConsumableArray from\"/Users/moldyr/Desktop/My projects/GIT Projects/waveportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _asyncToGenerator from\"/Users/moldyr/Desktop/My projects/GIT Projects/waveportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/moldyr/Desktop/My projects/GIT Projects/waveportal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import'./App.css';import{ethers}from\"ethers\";import abi from'./utils/WavePortal.json';var App=function App(){var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),currentAccount=_useState2[0],setCurrentAccount=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),allWaves=_useState4[0],setAllWaves=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),message=_useState6[0],setMessage=_useState6[1];var contractAddress=\" 0x0f7BEc5776B31fED1619E1fb2C31D41bD1f3e541\";var contractABI=abi.abi;var getAllWaves=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _window,ethereum,provider,signer,wavePortalContract,waves,wavesCleaned;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_window=window,ethereum=_window.ethereum;if(!ethereum){_context.next=15;break;}provider=new ethers.providers.Web3Provider(ethereum);signer=provider.getSigner();wavePortalContract=new ethers.Contract(contractAddress,contractABI,signer);_context.next=8;return wavePortalContract.getAllWaves();case 8:waves=_context.sent;wavesCleaned=[];waves.forEach(function(wave){wavesCleaned.push({address:wave.waver,timestamp:new Date(wave.timestamp*1000),message:wave.message});});setAllWaves(wavesCleaned);wavePortalContract.on(\"NewWave\",function(from,timestamp,message){console.log(\"NewWave\",from,timestamp,message);setAllWaves(function(prevState){return[].concat(_toConsumableArray(prevState),[{address:from,timestamp:new Date(timestamp*1000),message:message}]);});});_context.next=16;break;case 15:console.log(\"Ethereum object doesn't exist!\");case 16:_context.next=21;break;case 18:_context.prev=18;_context.t0=_context[\"catch\"](0);console.log(_context.t0);case 21:case\"end\":return _context.stop();}}},_callee,null,[[0,18]]);}));return function getAllWaves(){return _ref.apply(this,arguments);};}();var checkIfWalletIsConnected=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var _window2,ethereum,accounts,account;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_window2=window,ethereum=_window2.ethereum;if(ethereum){_context2.next=7;break;}console.log(\"Make sure you have metamask!\");return _context2.abrupt(\"return\");case 7:console.log(\"We have the ethereum object\",ethereum);case 8:_context2.next=10;return ethereum.request({method:'eth_accounts'});case 10:accounts=_context2.sent;if(accounts.length!==0){account=accounts[0];console.log(\"Found an authorized account:\",account);setCurrentAccount(account);getAllWaves();}else{console.log(\"No authorized account found\");}_context2.next=17;break;case 14:_context2.prev=14;_context2.t0=_context2[\"catch\"](0);console.log(_context2.t0);case 17:case\"end\":return _context2.stop();}}},_callee2,null,[[0,14]]);}));return function checkIfWalletIsConnected(){return _ref2.apply(this,arguments);};}();var connectWallet=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var _window3,ethereum,accounts;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_window3=window,ethereum=_window3.ethereum;if(ethereum){_context3.next=5;break;}alert(\"Get MetaMask!\");return _context3.abrupt(\"return\");case 5:_context3.next=7;return ethereum.request({method:\"eth_requestAccounts\"});case 7:accounts=_context3.sent;console.log(\"Connected\",accounts[0]);setCurrentAccount(accounts[0]);_context3.next=15;break;case 12:_context3.prev=12;_context3.t0=_context3[\"catch\"](0);console.log(_context3.t0);case 15:case\"end\":return _context3.stop();}}},_callee3,null,[[0,12]]);}));return function connectWallet(){return _ref3.apply(this,arguments);};}();var wave=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var _window4,ethereum,provider,signer,wavePortalContract,count,waveTxn;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.prev=0;_window4=window,ethereum=_window4.ethereum;if(!(ethereum&&message)){_context4.next=24;break;}provider=new ethers.providers.Web3Provider(ethereum);signer=provider.getSigner();wavePortalContract=new ethers.Contract(contractAddress,contractABI,signer);_context4.next=8;return wavePortalContract.getTotalWaves();case 8:count=_context4.sent;console.log(\"Retrieved total wave count...\",count.toNumber());_context4.next=12;return wavePortalContract.wave(message,{gasLimit:300000});case 12:waveTxn=_context4.sent;console.log(\"Mining...\",waveTxn.hash);_context4.next=16;return waveTxn.wait();case 16:console.log(\"Mined -- \",waveTxn.hash);setMessage(\"\");_context4.next=20;return wavePortalContract.getTotalWaves();case 20:count=_context4.sent;console.log(\"Retrieved total wave count...\",count.toNumber());_context4.next=25;break;case 24:console.log(\"Ethereum object doesn't exist!\");case 25:_context4.next=30;break;case 27:_context4.prev=27;_context4.t0=_context4[\"catch\"](0);console.log(_context4.t0);case 30:case\"end\":return _context4.stop();}}},_callee4,null,[[0,27]]);}));return function wave(){return _ref4.apply(this,arguments);};}();useEffect(function(){checkIfWalletIsConnected();},[]);return/*#__PURE__*/React.createElement(\"div\",{className:\"mainContainer\"},/*#__PURE__*/React.createElement(\"div\",{className:\"dataContainer\"},/*#__PURE__*/React.createElement(\"div\",{className:\"header\"},\"Hi Peeps!\"),/*#__PURE__*/React.createElement(\"div\",{className:\"bio\"},\"I am Moldyr and I am super excited to get onboard the Blockchain spaceship\\uD83D\\uDE80 \",/*#__PURE__*/React.createElement(\"br\",null),\" Connect your Ethereum wallet and wave at me!\"),/*#__PURE__*/React.createElement(\"input\",{type:\"text\",id:\"waveText\",className:\"waveText\",placeholder:\"Send me a link to something interesting about Solidity:)\",value:message,onChange:function onChange(e){return setMessage(e.target.value);}}),/*#__PURE__*/React.createElement(\"button\",{className:\"waveButton\",onClick:wave},\"wave at me \\uD83D\\uDC4B\"),!currentAccount&&/*#__PURE__*/React.createElement(\"button\",{className:\"waveButton\",onClick:connectWallet},\"Connect Wallet\"),allWaves.length>0&&/*#__PURE__*/React.createElement(\"div\",{className:\"wavers\"},/*#__PURE__*/React.createElement(\"h1\",null,\"Look who else waved \\uD83D\\uDE4C\"),allWaves.map(function(wave,index){return/*#__PURE__*/React.createElement(\"div\",{className:\"waversList\"},/*#__PURE__*/React.createElement(\"em\",null,wave.address),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"p\",null,wave.message),\" waved on\",\" \",/*#__PURE__*/React.createElement(\"em\",null,wave.timestamp.toDateString()));}))));};export default App;","map":{"version":3,"sources":["/Users/moldyr/Desktop/My projects/GIT Projects/waveportal/src/App.js"],"names":["React","useEffect","useState","ethers","abi","App","currentAccount","setCurrentAccount","allWaves","setAllWaves","message","setMessage","contractAddress","contractABI","getAllWaves","window","ethereum","provider","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","waves","wavesCleaned","forEach","wave","push","address","waver","timestamp","Date","on","from","console","log","prevState","checkIfWalletIsConnected","request","method","accounts","length","account","connectWallet","alert","getTotalWaves","count","toNumber","gasLimit","waveTxn","hash","wait","e","target","value","map","index","toDateString"],"mappings":"qsBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,MAAO,WAAP,CACA,OAASC,MAAT,KAAuB,QAAvB,CACA,MAAOC,CAAAA,GAAP,KAAgB,yBAAhB,CAEA,GAAMC,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,EAAM,CAChB,cAA4CH,QAAQ,CAAC,EAAD,CAApD,wCAAOI,cAAP,eAAuBC,iBAAvB,eACA,eAAgCL,QAAQ,CAAC,EAAD,CAAxC,yCAAOM,QAAP,eAAiBC,WAAjB,eACA,eAA8BP,QAAQ,CAAC,EAAD,CAAtC,yCAAOQ,OAAP,eAAgBC,UAAhB,eAEA,GAAMC,CAAAA,eAAe,CAAG,6CAAxB,CAEA,GAAMC,CAAAA,WAAW,CAAGT,GAAG,CAACA,GAAxB,CAEA,GAAMU,CAAAA,WAAW,0FAAG,sOAEKC,MAFL,CAERC,QAFQ,SAERA,QAFQ,KAGZA,QAHY,0BAIRC,QAJQ,CAIG,GAAId,CAAAA,MAAM,CAACe,SAAP,CAAiBC,YAArB,CAAkCH,QAAlC,CAJH,CAKRI,MALQ,CAKCH,QAAQ,CAACI,SAAT,EALD,CAMRC,kBANQ,CAMa,GAAInB,CAAAA,MAAM,CAACoB,QAAX,CAAoBX,eAApB,CAAqCC,WAArC,CAAkDO,MAAlD,CANb,uBAQME,CAAAA,kBAAkB,CAACR,WAAnB,EARN,QAQRU,KARQ,eAURC,YAVQ,CAUO,EAVP,CAWdD,KAAK,CAACE,OAAN,CAAc,SAAAC,IAAI,CAAI,CACpBF,YAAY,CAACG,IAAb,CAAkB,CAChBC,OAAO,CAAEF,IAAI,CAACG,KADE,CAEhBC,SAAS,CAAE,GAAIC,CAAAA,IAAJ,CAASL,IAAI,CAACI,SAAL,CAAiB,IAA1B,CAFK,CAGhBrB,OAAO,CAAEiB,IAAI,CAACjB,OAHE,CAAlB,EAKD,CAND,EAQAD,WAAW,CAACgB,YAAD,CAAX,CAEAH,kBAAkB,CAACW,EAAnB,CAAsB,SAAtB,CAAiC,SAACC,IAAD,CAAOH,SAAP,CAAkBrB,OAAlB,CAA8B,CAC7DyB,OAAO,CAACC,GAAR,CAAY,SAAZ,CAAuBF,IAAvB,CAA6BH,SAA7B,CAAwCrB,OAAxC,EAEAD,WAAW,CAAC,SAAA4B,SAAS,qCAAQA,SAAR,GAAmB,CACtCR,OAAO,CAAEK,IAD6B,CAEtCH,SAAS,CAAE,GAAIC,CAAAA,IAAJ,CAASD,SAAS,CAAG,IAArB,CAF2B,CAGtCrB,OAAO,CAAEA,OAH6B,CAAnB,IAAV,CAAX,CAKD,CARD,EArBc,+BA+BdyB,OAAO,CAACC,GAAR,CAAY,gCAAZ,EA/Bc,yFAkChBD,OAAO,CAACC,GAAR,cAlCgB,qEAAH,kBAAXtB,CAAAA,WAAW,0CAAjB,CAsCA,GAAMwB,CAAAA,wBAAwB,2FAAG,yMAERvB,MAFQ,CAErBC,QAFqB,UAErBA,QAFqB,IAIxBA,QAJwB,0BAK3BmB,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAL2B,yCAQ3BD,OAAO,CAACC,GAAR,CAAY,6BAAZ,CAA2CpB,QAA3C,EAR2B,+BAWNA,CAAAA,QAAQ,CAACuB,OAAT,CAAiB,CAAEC,MAAM,CAAE,cAAV,CAAjB,CAXM,SAWvBC,QAXuB,gBAa7B,GAAIA,QAAQ,CAACC,MAAT,GAAoB,CAAxB,CAA2B,CACnBC,OADmB,CACTF,QAAQ,CAAC,CAAD,CADC,CAEzBN,OAAO,CAACC,GAAR,CAAY,8BAAZ,CAA4CO,OAA5C,EACApC,iBAAiB,CAACoC,OAAD,CAAjB,CACA7B,WAAW,GACZ,CALD,IAKO,CACLqB,OAAO,CAACC,GAAR,CAAY,6BAAZ,EACD,CApB4B,qFAsB7BD,OAAO,CAACC,GAAR,eAtB6B,uEAAH,kBAAxBE,CAAAA,wBAAwB,2CAA9B,CA0BA,GAAMM,CAAAA,aAAa,2FAAG,iMAEG7B,MAFH,CAEVC,QAFU,UAEVA,QAFU,IAIbA,QAJa,0BAKhB6B,KAAK,CAAC,eAAD,CAAL,CALgB,gEASK7B,CAAAA,QAAQ,CAACuB,OAAT,CAAiB,CAAEC,MAAM,CAAE,qBAAV,CAAjB,CATL,QASZC,QATY,gBAWlBN,OAAO,CAACC,GAAR,CAAY,WAAZ,CAAyBK,QAAQ,CAAC,CAAD,CAAjC,EACAlC,iBAAiB,CAACkC,QAAQ,CAAC,CAAD,CAAT,CAAjB,CAZkB,qFAclBN,OAAO,CAACC,GAAR,eAdkB,uEAAH,kBAAbQ,CAAAA,aAAa,2CAAnB,CAkBA,GAAMjB,CAAAA,IAAI,2FAAG,yOAEYZ,MAFZ,CAEDC,QAFC,UAEDA,QAFC,MAILA,QAAQ,EAAIN,OAJP,4BAKDO,QALC,CAKU,GAAId,CAAAA,MAAM,CAACe,SAAP,CAAiBC,YAArB,CAAkCH,QAAlC,CALV,CAMDI,MANC,CAMQH,QAAQ,CAACI,SAAT,EANR,CAODC,kBAPC,CAOoB,GAAInB,CAAAA,MAAM,CAACoB,QAAX,CAAoBX,eAApB,CAAqCC,WAArC,CAAkDO,MAAlD,CAPpB,wBASWE,CAAAA,kBAAkB,CAACwB,aAAnB,EATX,QASHC,KATG,gBAUPZ,OAAO,CAACC,GAAR,CAAY,+BAAZ,CAA6CW,KAAK,CAACC,QAAN,EAA7C,EAVO,wBAYe1B,CAAAA,kBAAkB,CAACK,IAAnB,CAAwBjB,OAAxB,CAAiC,CAAEuC,QAAQ,CAAE,MAAZ,CAAjC,CAZf,SAYDC,OAZC,gBAcPf,OAAO,CAACC,GAAR,CAAY,WAAZ,CAAyBc,OAAO,CAACC,IAAjC,EAdO,wBAgBDD,CAAAA,OAAO,CAACE,IAAR,EAhBC,SAiBPjB,OAAO,CAACC,GAAR,CAAY,WAAZ,CAAyBc,OAAO,CAACC,IAAjC,EACAxC,UAAU,CAAC,EAAD,CAAV,CAlBO,wBAoBOW,CAAAA,kBAAkB,CAACwB,aAAnB,EApBP,SAoBPC,KApBO,gBAqBPZ,OAAO,CAACC,GAAR,CAAY,+BAAZ,CAA6CW,KAAK,CAACC,QAAN,EAA7C,EArBO,gCAuBPb,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAvBO,6FA0BTD,OAAO,CAACC,GAAR,eA1BS,uEAAH,kBAAJT,CAAAA,IAAI,2CAAV,CA+BA1B,SAAS,CAAC,UAAM,CACdqC,wBAAwB,GACzB,CAFQ,CAEN,EAFM,CAAT,CAIA,mBACE,2BAAK,SAAS,CAAC,eAAf,eACE,2BAAK,SAAS,CAAC,eAAf,eACE,2BAAK,SAAS,CAAC,QAAf,cADF,cAKE,2BAAK,SAAS,CAAC,KAAf,yGAC+E,8BAD/E,iDALF,cAQE,6BACE,IAAI,CAAC,MADP,CAEE,EAAE,CAAC,UAFL,CAGE,SAAS,CAAC,UAHZ,CAIE,WAAW,CAAC,0DAJd,CAKE,KAAK,CAAE5B,OALT,CAME,QAAQ,CAAE,kBAAC2C,CAAD,QAAO1C,CAAAA,UAAU,CAAC0C,CAAC,CAACC,MAAF,CAASC,KAAV,CAAjB,EANZ,EARF,cAiBE,8BAAQ,SAAS,CAAC,YAAlB,CAA+B,OAAO,CAAE5B,IAAxC,4BAjBF,CAqBG,CAACrB,cAAD,eACC,8BAAQ,SAAS,CAAC,YAAlB,CAA+B,OAAO,CAAEsC,aAAxC,mBAtBJ,CA2BGpC,QAAQ,CAACkC,MAAT,CAAkB,CAAlB,eACC,2BAAK,SAAS,CAAC,QAAf,eACE,iEADF,CAEGlC,QAAQ,CAACgD,GAAT,CAAa,SAAC7B,IAAD,CAAO8B,KAAP,qBACZ,2BAAK,SAAS,CAAC,YAAf,eACE,8BAAK9B,IAAI,CAACE,OAAV,CADF,cACyB,8BADzB,cAEE,6BAAIF,IAAI,CAACjB,OAAT,CAFF,aAEiC,GAFjC,cAGE,8BAAKiB,IAAI,CAACI,SAAL,CAAe2B,YAAf,EAAL,CAHF,CADY,EAAb,CAFH,CA5BJ,CADF,CADF,CA4CD,CA1KD,CA4KA,cAAerD,CAAAA,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport { ethers } from \"ethers\";\nimport abi from './utils/WavePortal.json'\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [allWaves, setAllWaves] = useState([]);\n  const [message, setMessage] = useState(\"\")\n\n  const contractAddress = \" 0x0f7BEc5776B31fED1619E1fb2C31D41bD1f3e541\";\n\n  const contractABI = abi.abi;\n\n  const getAllWaves = async () => {\n    try {\n      const { ethereum } = window\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        const waves = await wavePortalContract.getAllWaves();\n\n        const wavesCleaned = [];\n        waves.forEach(wave => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message,\n          })\n        })\n\n        setAllWaves(wavesCleaned)\n\n        wavePortalContract.on(\"NewWave\", (from, timestamp, message) => {\n          console.log(\"NewWave\", from, timestamp, message);\n\n          setAllWaves(prevState => [...prevState, {\n            address: from,\n            timestamp: new Date(timestamp * 1000),\n            message: message\n          }]);\n        });\n      } else {\n        console.log(\"Ethereum object doesn't exist!\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n        getAllWaves();\n      } else {\n        console.log(\"No authorized account found\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum && message) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n\n        const waveTxn = await wavePortalContract.wave(message, { gasLimit: 300000 });\n\n        console.log(\"Mining...\", waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n        setMessage(\"\");\n\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n          Hi Peeps!\n        </div>\n\n        <div className=\"bio\">\n          I am Moldyr and I am super excited to get onboard the Blockchain spaceship🚀 <br /> Connect your Ethereum wallet and wave at me!\n        </div>\n        <input\n          type=\"text\"\n          id=\"waveText\"\n          className=\"waveText\"\n          placeholder=\"Send me a link to something interesting about Solidity:)\"\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n        />\n\n        <button className=\"waveButton\" onClick={wave}>\n          wave at me 👋\n        </button>\n\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n\n        {allWaves.length > 0 && (\n          <div className=\"wavers\">\n            <h1>Look who else waved 🙌</h1>\n            {allWaves.map((wave, index) => (\n              <div className=\"waversList\">\n                <em>{wave.address}</em><br />\n                <p>{wave.message}</p> waved on{\" \"}\n                <em>{wave.timestamp.toDateString()}</em>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}